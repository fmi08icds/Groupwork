""" import numpy as np
import matplotlib.pyplot as plt
import pandas as pd



class Data_Gen_Process:
    def __init__(self, data_range: list = [-100, 100], mean: int,
                 std: int, effect_size: float, effect_exponent: float,
                 step_amount: int, step_intensity: float):
        # simple linear y
        self.y_true = range(data_range[0], data_range[1])
        self.size = len(self.y_true)

        # epsilon is normally distributed (easiest & standard case)
        mean = 0
        std = 10
        eps = np.random.normal(mean, std, size)

    # epsilon is has (strong) heteroscedasticity
    effect_size = 0.5
    effect_exponent = 1.02
    hetero_eps = eps + [(lambda arg=x: effect_size*(arg**effect_exponent-arg))()
                        for x in range(size)]*np.random.choice([-1, 1], size=size)

    # epsilon jumps to a constant value at a certain point in time (splines)
    step_amount = 6
    step_intensity = 25
    steps = np.random.choice(
        range(-step_intensity, step_intensity), size=step_amount)

    # either randomly or according to a list of jump-points
    # randomly:
    interval_indicator = np.floor(
        np.sort(np.random.dirichlet(np.ones(step_amount), size=1)[0])*size)
    interval_indicator[step_amount-1] = size - \
        sum(interval_indicator[0:step_amount-1])
    interval_indicator = [int(elem) for elem in interval_indicator]
    assert round(sum(interval_indicator), 1) == size

    # epsilon increases to the size of the step within the specified interval
    step_eps = eps + np.repeat(steps, interval_indicator)

    # according to a list of @step-amount-1 many jump-points:
    # interval_indicator = [20, 50, 70]

    # plot step_eps
    plt.scatter(range(size), y_true+step_eps)
    plt.show()


data = pd.DataFrame({'y': y_true, 'hetero_eps': hetero_eps, 'step_eps':step_eps}, index=range(0, size))
 """





### abborted the work in progress. could come back later though. ###